C51 COMPILER V9.56.0.0   8051_SPI                                                          10/08/2017 14:37:16 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE 8051_SPI
OBJECT MODULE PLACED IN .\Objects\8051_spi.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE 8051_spi.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\
                    -8051_spi.lst) TABS(2) OBJECT(.\Objects\8051_spi.obj)

line level    source

   1          #include "at89c5131.h"
   2          #include "stdio.h"
   3          
   4          bit transmit_completed=0;
   5          sbit CS_BAR = P1^4;
   6          sbit LED5 = P1^5;
   7          sbit LED7 = P1^7;
   8          unsigned char serial_data;                // Chip Select for the ADC
   9          void SPI_Init();
  10          void dac(unsigned int data1);
  11          void Delay(int delay);
  12          
  13          void main(void)
  14          {
  15   1        P2 = 0x00;                      // Make Port 2 output 
  16   1        P1 &= 0x00;                     // Make P1 Pin4-7 output
  17   1        
  18   1      SPI_Init();
  19   1        
  20   1      while(1)
  21   1      {
  22   2        dac(4095);Delay(10000);
  23   2        LED7 =1;
  24   2           //dac(4095);Delay(10000);
  25   2        
  26   2      }
  27   1      //while(1);
  28   1      }
  29          
  30          
  31          
  32          void SPI_Init()
  33          {
  34   1        CS_BAR = 1;                     // DISABLE ADC SLAVE SELECT-CS 
  35   1        SPCON |= 0x20;                  // P1.1(SSBAR) is available as standard I/O pin 
  36   1        SPCON |= 0x01;                  // Fclk Periph/4 AND Fclk Periph=12MHz ,HENCE SCK IE. BAUD RATE=3000KHz 
  37   1        SPCON |= 0x10;                  // Master mode 
  38   1        SPCON &= ~0x08;                 // CPOL=0; transmit mode example|| SCK is 0 at idle state
  39   1        SPCON |= 0x04;                  // CPHA=1; transmit mode example 
  40   1        IEN1 |= 0x04;                   // enable spi interrupt 
  41   1        EA=1;                           // enable interrupts 
  42   1        SPCON |= 0x40;                  // run spi;ENABLE SPI INTERFACE SPEN= 1 
  43   1      }
  44          
  45          
  46          void dac(unsigned int dacval)
  47          {
  48   1        unsigned char sendval = 0;
  49   1        sendval = (dacval >> 8 | 0x70);
  50   1        CS_BAR = 0;                 // enable ADC as slave       
  51   1        SPDAT = sendval;        // 80H written to start ADC CH0 single ended sampling,refer ADC datasheet
  52   1        while(!transmit_completed); // wait end of transmition  
  53   1        transmit_completed = 0;     // clear software transfer flag 
  54   1        sendval = dacval;
C51 COMPILER V9.56.0.0   8051_SPI                                                          10/08/2017 14:37:16 PAGE 2   

  55   1        SPDAT = sendval;        // 80H written to start ADC CH0 single ended sampling,refer ADC datasheet
  56   1        while(!transmit_completed); // wait end of transmition  
  57   1        transmit_completed = 0;     // clear software transfer flag 
  58   1        CS_BAR = 1;
  59   1      }
  60          
  61          void it_SPI(void) interrupt 9 /* interrupt address is 0x004B, (Address -3)/8 = interrupt no.*/
  62          { LED5 =1;
  63   1        switch  ( SPSTA )         /* read and clear spi status register */
  64   1        {
  65   2          case 0x80:
  66   2            //serial_data=SPDAT;   /* read receive data */
  67   2            transmit_completed=1;   /* set software flag */
  68   2          break;
  69   2      
  70   2          case 0x10:
  71   2               /* put here for mode fault tasking */  
  72   2          break;
  73   2        
  74   2          case 0x40:
  75   2               /* put here for overrun tasking */ 
  76   2          break;
  77   2          
  78   2        }
  79   1        //Delay(10000);
  80   1        LED5=0;
  81   1      }
  82          void Delay(int delay)
  83          {
  84   1        int d=0;
  85   1        while(delay>0)
  86   1        {
  87   2          for(d=0;d<20;d++);
  88   2          delay--;
  89   2        }
  90   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    143    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
