C51 COMPILER V9.56.0.0   8051_SPI                                                          10/03/2017 19:35:46 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE 8051_SPI
OBJECT MODULE PLACED IN .\Objects\8051_spi.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE 8051_spi.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\
                    -8051_spi.lst) TABS(2) OBJECT(.\Objects\8051_spi.obj)

line level    source

   1          #include "at89c5131.h"
   2          #include "stdio.h"
   3          
   4          bit transmit_completed=0;
   5          sbit CS_BAR = P1^4;
   6          sbit LED5 = P1^5;
   7          sbit LED7 = P1^7;
   8          unsigned char serial_data;                // Chip Select for the ADC
   9          void SPI_Init();
  10          void dac(unsigned int data1);
  11          void Delay(int delay);
  12          
  13          void main(void)
  14          {
  15   1        P2 = 0x00;                      // Make Port 2 output 
  16   1        P1 &= 0x00;                     // Make P1 Pin4-7 output
  17   1        
  18   1      SPI_Init();
  19   1        
  20   1      //while(1)
  21   1      //{
  22   1        dac(4095);Delay(10000);
  23   1        LED7 =1;
  24   1           //dac(4095);Delay(10000);
  25   1        
  26   1      //}
  27   1      while(1);
  28   1      }
  29          
  30          
  31          
  32          void SPI_Init()
  33          {
  34   1        CS_BAR = 1;                     // DISABLE ADC SLAVE SELECT-CS 
  35   1        SPCON |= 0x20;                  // P1.1(SSBAR) is available as standard I/O pin 
  36   1        SPCON |= 0x01;                  // Fclk Periph/4 AND Fclk Periph=12MHz ,HENCE SCK IE. BAUD RATE=3000KHz 
  37   1        SPCON |= 0x10;                  // Master mode 
  38   1        SPCON &= ~0x08;                 // CPOL=0; transmit mode example|| SCK is 0 at idle state
  39   1        SPCON |= 0x04;                  // CPHA=1; transmit mode example 
  40   1        IEN1 |= 0x04;                   // enable spi interrupt 
  41   1        EA=1;                           // enable interrupts 
  42   1        SPCON |= 0x40;                  // run spi;ENABLE SPI INTERFACE SPEN= 1 
  43   1      }
  44          
  45          
  46          void dac(unsigned int data1)
  47          {
  48   1        unsigned char upper_bits;
  49   1        unsigned char lower_bits; 
  50   1      
  51   1        //first obtain the upper 8 bits
  52   1        upper_bits = (data1>>8)&00001111;         // obtain the upper 4 bits 
  53   1        upper_bits = upper_bits || 01110000;          //first 4 bits are config,DacA/b,(un)buffered,2x/1x,bufferDisabl
             -/
C51 COMPILER V9.56.0.0   8051_SPI                                                          10/03/2017 19:35:46 PAGE 2   

  54   1        //now obtain the lower 8 bits
  55   1        lower_bits = data1&0xFF;                  // ANDing separates the lower 8 bits
  56   1        CS_BAR=0;
  57   1        SPDAT=upper_bits;                         // sending the upper 8 bits serially     
  58   1          while(!transmit_completed); // wait end of transmition;TILL SPIF = 1 i.e. MSB of SPSTA
  59   1          transmit_completed = 0;     // clear software transfert flag
  60   1        SPDAT=lower_bits;           // sending the lower 8 bits serially   
  61   1          while(!transmit_completed); // wait end of transmition;TILL SPIF = 1 i.e. MSB of SPSTA
  62   1          transmit_completed = 0;     // clear software transfert flag 
  63   1        CS_BAR=1;
  64   1      
  65   1      }
  66          
  67          void it_SPI(void) interrupt 9 /* interrupt address is 0x004B, (Address -3)/8 = interrupt no.*/
  68          { LED5 =1;
  69   1        switch  ( SPSTA )         /* read and clear spi status register */
  70   1        {
  71   2          case 0x80:
  72   2            //serial_data=SPDAT;   /* read receive data */
  73   2            transmit_completed=1;   /* set software flag */
  74   2          break;
  75   2      
  76   2          case 0x10:
  77   2               /* put here for mode fault tasking */  
  78   2          break;
  79   2        
  80   2          case 0x40:
  81   2               /* put here for overrun tasking */ 
  82   2          break;
  83   2          
  84   2        }
  85   1        Delay(10000);
  86   1        LED5=0;
  87   1      }
  88          void Delay(int delay)
  89          {
  90   1        int d=0;
  91   1        while(delay>0)
  92   1        {
  93   2          for(d=0;d<20;d++);
  94   2          delay--;
  95   2        }
  96   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    188    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
